test_that("Checking file list function", {
  print("########################################################")
  print("## Checking file list function                        ##")
  print("########################################################")

  print("=== check for using raw ===")
  pattern = ".raw"
  datapth <- system.file("extdata", "dims",package="msPurity")
  outdir <- file.path(datapth, "test")
  inDF <- Getfiles(datapth , raw=T, peakout=outdir, pattern=pattern, check = F, cStrt=F )
  fl <- length(dir(datapth, full.names=T, pattern=pattern, ignore.case = T, recursive=F,include.dirs = F))
  expect_equal(fl, nrow(inDF))

  print("=== check for using csv ===")
  pattern = ".csv"
  inDF <- Getfiles(file.path(datapth,"msfr-peaks"), raw=F, check=F, pattern = pattern, cStrt=F  )
  fl <- length(dir(file.path(datapth,"msfr-peaks"), full.names=T, pattern=pattern, ignore.case = T, recursive=F,include.dirs = F))
  expect_equal(fl, nrow(inDF))

  print("=== check for using mzML ===")
  pattern = ".mzML"
  inDF <- Getfiles(datapth, raw=F, check=F, pattern = pattern, cStrt=F )
  fl <- length(dir(datapth, full.names=T, pattern=pattern, ignore.case = T, recursive=F, include.dirs = F))
  expect_equal(fl, nrow(inDF))

})

test_that("Check file conversion", {
  print("########################################################")
  print("## Check file conversion                              ##")
  print("########################################################")

  if(.Platform$OS.type == "unix") {
    print("=== File conversion only available in windows ===")
  } else {
    print("=== Checking file conversion ===")
    # DMA specific
    datapth <- system.file("extdata", "dims",package="msPurity")
    outdir <- file.path(datapth, "tmp")

    dir.create(outdir)
    msppth = find.package("msPurity", lib.loc=NULL, quiet = TRUE)
    msfpy <- file.path(msppth, "scripts", "dma-dims", "MSFilePeakList.py")
    msfpyCommand <- paste("python ", '"', msfpy, '"', " -i ", datapth, " -o ", outdir , " -c ", 2, sep="")

    print(msfpyCommand)
    # run the conversion script
    system(msfpyCommand)

    # remove the tmp folder
    unlink(outdir, recursive = T, force = T)

  }
})


test_that("Check average spectra function only", {
  print("########################################################")
  print("## Check average spectra (function only)              ##")
  print("########################################################")
  mzmlPth <- system.file("extdata", "dims", "B02_Daph_TEST_pos.mzML", package="msPurity")
  msfrPth <- system.file("extdata", "dims","msfr-peaks", "Daph_TEST_pos_B02.csv", package="msPurity")

  examp <- system.file("extdata", "dims", "example_results", package="msPurity")

  print("=== check single core ===")
  avP <- averageSpectraSingle(mzmlPth, cores=1, snthr = 40) # high snr threshold makes hc quicker
  testfile <- 'B02_daph_avPeaks_default.csv'
  #write.csv(avP, row.names = F, file.path(examp, testfile))devt
  avP_check <- read.csv(file.path(examp, testfile))
  expect_equal(avP, avP_check)

  print("=== check multi-core ===")
  avP <- averageSpectraSingle(mzmlPth, cores=4, snthr = 40)
  expect_equal(avP, avP_check)

  print("=== check simple clustering ===")
  avP <- averageSpectraSingle(mzmlPth, cores=1, clustType="simple", snthr = 40)
  testfile <- 'B02_daph_avPeaks_clust_simple.csv'
  #write.csv(avP,row.names = F, file.path(examp, testfile))
  avP_check <- read.csv(file.path(examp, testfile))
  expect_equal(avP, avP_check)

  print("=== check using MsFileReader output (median SNR thres) ===")
  avP <- averageSpectraSingle(msfrPth, cores=2, MSFileReader = TRUE, snMeth="median", snthr = 40)
  testfile <- 'B02_daph_avPeaks_msfileReader_median.csv'
  #write.csv(avP,row.names = F, file.path(examp, testfile))
  avP_check <- read.csv(file.path(examp, testfile))
  expect_equal(avP, avP_check)

  print("=== check using MsFileReader output (precalc SNR thres) ===")
  avP <- averageSpectraSingle(msfrPth, cores=2, MSFileReader = TRUE, snMeth="precalc", snthr = 40)
  testfile <- 'B02_daph_avPeaks_msfileReader_precalc.csv'
  #write.csv(avP,row.names = F, file.path(examp, testfile))
  avP_check <- read.csv(file.path(examp, testfile))
  expect_equal(avP, avP_check)

})



test_that("Check subtract spectra (function only)", {
  print("########################################################")
  print("## Check mz subtraction (function only)               ##")
  print("########################################################")
  examp <- system.file("extdata", "dims", "example_results", package="msPurity")
  peakpth <- file.path(examp, 'B02_daph_avPeaks_msfileReader_precalc.csv')
  peaklist <- read.csv(peakpth)

  mz1 <- c(100.001, 200.002, 300.302)
  mz2 <- c(100.004, 200.003, 500.101)
  i1 <- c(100, 100, 100)
  i2 <- c(100, 10000, 100)
  subout <- subtractMZ(mz1, mz2, i1, i2, ppm=5, s2bthres =10)
  expect_equal(subout, c(100.001, 300.302))

  mz2 <- c(155.07, 173.08, 179.11)
  i2 <- c(100000000, 100000000, 100000000)
  # check it can remove stuff with larger datasets
  expect_equal(length(subtractMZ(peaklist$mz, mz2, peaklist$i, i2)), 223)

  # Check when both the same
  expect_null(subtractMZ(peaklist$mz, peaklist$mz, peaklist$i, peaklist$i))
})


test_that("Check predict purity (function only)", {
  print("########################################################")
  print("## Check predict purity (function only)               ##")
  print("########################################################")
  mzmlPth <- system.file("extdata", "dims", "B02_Daph_TEST_pos.mzML", package="msPurity")
  msfrPth <- system.file("extdata", "dims","msfr-peaks", "Daph_TEST_pos_B02.csv", package="msPurity")

  examp <- system.file("extdata", "dims", "example_results", package="msPurity")

  print("=== Check predicted purity for .csv files ===")
  # Get the peaks to check
  peakpth <- file.path(examp, 'B02_daph_avPeaks_msfileReader_precalc.csv')
  peaklist <- read.csv(peakpth)

  # run the function
  predicted1 <- dimsPredictPuritySingle(peaklist$mz, filepth=msfrPth, minOffset=0.5, maxOffset=0.5, ppm=5, mzML=F)

  # check the function
  #write.csv(predicted1, row.names = F, file.path(examp, "predictedMSFR.csv"))
  predictP_check <- read.csv(file.path(examp, "predictedMSFR.csv"))
  expect_equal(predicted1, predictP_check)


  print("=== Check predicted purity for mzML files ===")
  # get the peaks tocheck
  peakpth <- file.path(examp, 'B02_daph_avPeaks_default.csv')
  peaklist <- read.csv(peakpth)

  #run the function
  predicted2 <- dimsPredictPuritySingle(peaklist$mz, filepth=mzmlPth , minOffset=0.5, maxOffset=0.5, ppm=5, mzML=T)

  #check the function
  #write.csv(predicted2, row.names = F, file.path(examp, "predictedmzML.csv"))
  predictP_check <- read.csv(file.path(examp, "predictedmzML.csv"))
  expect_equal(predicted2, predictP_check)

})

test_that("Check mzML workflow", {
  print("########################################################")
  print("## Check mzML Workflow                                ##")
  print("########################################################")

  pattern = ".mzML"
  datapth <- system.file("extdata", "dims", package="msPurity")
  examp <- system.file("extdata", "dims", "example_results", package="msPurity")
  tmpdir <- file.path(datapth, "tmp")
  dir.create(tmpdir)

  inDF <- Getfiles(datapth, raw=F, pattern=pattern, check = F, cStrt = F)
  rownames(inDF) <- seq(1, nrow(inDF))

  ex <- purityPD(fileList=inDF, cores=2, mzML=T)

  ################################
  # Average spectra.
  ################################
  print("averaging spectra")
  exAv <- averageSpectra(ex,
                         snMeth = "median",
                         clustType="hc",
                         ppm=1.5,
                         snthr = 30, # very high criteria so we have less peaks to process (for checking purpsoes only)
                         av="median",
                         missingV = "ignore",
                         minfrac=1
  )
  closeAllConnections()


  #saveRDS(exAv, file.path(examp, "exAv-mzML.rds"))
  exAvTest <- readRDS(file.path(examp, "exAv-mzML.rds"))

  # check avPeaks
  expect_equal(exAv@avPeaks, exAvTest@avPeaks)

  ################################
  # filtering spectra.
  ################################
  print("filtering spectra")
  exF <- filterp(exAv, thr=5000, rsd =5, sampleOnly=F)
  closeAllConnections()
  #saveRDS(exF, file.path(examp, "exF-mzML.rds"))
  exFTest <- readRDS(file.path(examp , "exF-mzML.rds"))
  # check avPeaks
  expect_equal(exF@avPeaks, exFTest@avPeaks)

  # check peaks have been removed
  expect_gt(nrow(exAv@avPeaks$processed[[2]]), nrow(exF@avPeaks$processed[[2]]))


  ################################
  # subtracting spectra.
  ################################
  print("subtracting")
  exS <- subtract(exF, ppm=5, s2bthres=10)
  closeAllConnections()
  #saveRDS(exS, file.path(examp, "exS-mzML.rds"))
  exSTest <- readRDS(file.path(examp, "exS-mzML.rds"))
  # check avPeaks
  expect_equal(exS@avPeaks, exSTest@avPeaks)

  # check peaks have been removed
  expect_gt(nrow(exF@avPeaks$processed[[2]]), nrow(exS@avPeaks$processed[[2]]))


  ################################
  # Predict purity
  ################################
  print("purity prediction")
  exP <- dimsPredictPurity(exS, ppm=1.5)
  #saveRDS(exP, file.path(examp, "exP-mzML.rds"))
  exPTest <- readRDS(file.path(examp, "exP-mzML.rds"))
  # check avPeaks
  expect_equal(exP@avPeaks, exPTest@avPeaks)

  closeAllConnections()
})



