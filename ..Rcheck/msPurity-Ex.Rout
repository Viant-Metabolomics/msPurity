
R version 3.4.4 (2018-03-15) -- "Someone to Lean On"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "msPurity"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('msPurity')
Loading required package: Rcpp
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Getfiles")
> ### * Getfiles
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Getfiles
> ### Title: Get files for DI-MS processing
> ### Aliases: Getfiles
> 
> ### ** Examples
> 
> 
> datapth <- system.file("extdata", "dims", "mzML", package="msPurityData")
> inDF <- Getfiles(datapth, pattern=".mzML", check = FALSE, cStrt = FALSE)
> 
> 
> 
> cleanEx()
> nameEx("assessPuritySingle")
> ### * assessPuritySingle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: assessPuritySingle
> ### Title: Assess the purity of a single LC-MS/MS or DI-MS/MS file
> ### Aliases: assessPuritySingle
> 
> ### ** Examples
> 
> filepth <- system.file("extdata", "lcms", "mzML", "LCMSMS_1.mzML", package="msPurityData")
> 
> puritydf <- assessPuritySingle(filepth)
> 
> 
> 
> cleanEx()
> nameEx("averageSpectra-purityD-method")
> ### * averageSpectra-purityD-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: averageSpectra,purityD-method
> ### Title: Using purityD object, calculates to average mz, intensity and
> ###   signal-to-noise of multiple scans from multiple MS datafiles (mzML or
> ###   .csv)
> ### Aliases: averageSpectra,purityD-method averageSpectra
> 
> ### ** Examples
> 
> 
> datapth <- system.file("extdata", "dims", "mzML", package="msPurityData")
> inDF <- Getfiles(datapth, pattern=".mzML", check = FALSE, cStrt = FALSE)
> ppDIMS <- purityD(fileList=inDF, cores=1, mzML=TRUE)
> ppDIMS <- averageSpectra(ppDIMS)
> 
> 
> 
> cleanEx()

detaching ‘package:mzR’

> nameEx("averageSpectraSingle")
> ### * averageSpectraSingle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: averageSpectraSingle
> ### Title: Calculates to average mz, intensity and signal-to-noise of
> ###   multiple scans from 1 MS datafile (mzML or .csv)
> ### Aliases: averageSpectraSingle
> 
> ### ** Examples
> 
> mzmlPth <- system.file("extdata", "dims", "mzML", "B02_Daph_TEST_pos.mzML", package="msPurityData")
> avP <- averageSpectraSingle(mzmlPth)
> 
> 
> 
> cleanEx()
> nameEx("dimsPredictPurity-purityD-method")
> ### * dimsPredictPurity-purityD-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dimsPredictPurity,purityD-method
> ### Title: Using purityD object, assess anticipated purity from a DI-MS run
> ### Aliases: dimsPredictPurity,purityD-method dimsPredictPurity
> 
> ### ** Examples
> 
> 
> datapth <- system.file("extdata", "dims", "mzML", package="msPurityData")
> inDF <- Getfiles(datapth, pattern=".mzML", check = FALSE, cStrt = FALSE)
> ppDIMS <- purityD(fileList=inDF, cores=1, mzML=TRUE)
> ppDIMS <- averageSpectra(ppDIMS)
> ppDIMS <- filterp(ppDIMS)
> ppDIMS <- subtract(ppDIMS)
> ppDIMS <- dimsPredictPurity(ppDIMS)
> 
> 
> 
> cleanEx()

detaching ‘package:mzR’

> nameEx("dimsPredictPuritySingle")
> ### * dimsPredictPuritySingle
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dimsPredictPuritySingle
> ### Title: Predict the precursor purity from a DI-MS dataset
> ### Aliases: dimsPredictPuritySingle
> 
> ### ** Examples
> 
> mzmlPth <- system.file("extdata", "dims", "mzML", "B02_Daph_TEST_pos.mzML", package="msPurityData")
> predicted <- dimsPredictPuritySingle(c(173.0806, 216.1045), filepth=mzmlPth , minOffset=0.5, maxOffset=0.5, ppm=5, mzML=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("filterp-purityD-method")
> ### * filterp-purityD-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filterp,purityD-method
> ### Title: Filter out peaks based on intensity and RSD criteria
> ### Aliases: filterp,purityD-method filterp
> 
> ### ** Examples
> 
> 
> datapth <- system.file("extdata", "dims", "mzML", package="msPurityData")
> inDF <- Getfiles(datapth, pattern=".mzML", check = FALSE, cStrt = FALSE)
> 
> ppDIMS <- purityD(inDF, cores=1)
> ppDIMS <- averageSpectra(ppDIMS)
> ppDIMS <- filterp(ppDIMS, thr = 5000)
> 
> 
> 
> cleanEx()

detaching ‘package:mzR’

> nameEx("frag4feature-purityA-method")
> ### * frag4feature-purityA-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: frag4feature,purityA-method
> ### Title: Assign precursor purity scored fragmentation spectra to XCMS
> ###   features
> ### Aliases: frag4feature,purityA-method frag4feature
> 
> ### ** Examples
> 
> 
> msmsPths <- list.files(system.file("extdata", "lcms", "mzML", package="msPurityData"), full.names = TRUE, pattern = "MSMS")
> xset <- xcms::xcmsSet(msmsPths, nSlaves = 1)
Use of argument 'nSlaves' is deprecated, please use 'BPPARAM' instead.
Loading required package: xcms
Loading required package: Biobase
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, cbind, colMeans, colSums, colnames, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, lengths, mapply, match, mget, order, paste, pmax, pmax.int,
    pmin, pmin.int, rank, rbind, rowMeans, rowSums, rownames, sapply,
    setdiff, sort, table, tapply, union, unique, unsplit, which,
    which.max, which.min

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: BiocParallel
Loading required package: MSnbase
Loading required package: mzR
Loading required package: ProtGenerics

This is MSnbase version 2.4.2 
  Visit https://lgatto.github.io/MSnbase/ to get started.


Attaching package: ‘MSnbase’

The following object is masked from ‘package:stats’:

    smooth

The following object is masked from ‘package:base’:

    trimws


This is xcms version 3.0.2 


Attaching package: ‘xcms’

The following object is masked from ‘package:stats’:

    sigma

> xset <- xcms::group(xset)
Processing 3163 mz slices ... OK
> xset <- xcms::retcor(xset)
Performing retention time correction using 351 peak groups.
> xset <- xcms::group(xset)
Processing 3163 mz slices ... OK
> 
> pa  <- purityA(msmsPths, interpol = "linear")
> pa <- frag4feature(pa, xset)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:xcms’, ‘package:MSnbase’, ‘package:ProtGenerics’,
  ‘package:mzR’, ‘package:BiocParallel’, ‘package:Biobase’,
  ‘package:BiocGenerics’, ‘package:parallel’

> nameEx("getP-purityD-method")
> ### * getP-purityD-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getP,purityD-method
> ### Title: Get peaklist for a purityD object
> ### Aliases: getP,purityD-method getP
> 
> ### ** Examples
> 
> datapth <- system.file("extdata", "dims", "mzML", package="msPurityData")
> inDF <- Getfiles(datapth, pattern=".mzML", check = FALSE, cStrt = FALSE)
> ppDIMS <- purityD(fileList=inDF, cores=1, mzML=TRUE)
> peaks <- getP(ppDIMS)
> 
> 
> 
> cleanEx()
> nameEx("get_additional_mzml_meta")
> ### * get_additional_mzml_meta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_additional_mzml_meta
> ### Title: Get additional mzML meta
> ### Aliases: get_additional_mzml_meta
> 
> ### ** Examples
> 
> mzml_pth <- system.file("extdata", "dims", "mzML", 'B02_Daph_TEST_pos.mzML', package="msPurityData")
> meta_df <- get_additional_mzml_meta(mzml_pth)
> 
> 
> 
> cleanEx()
> nameEx("groupPeaks-purityD-method")
> ### * groupPeaks-purityD-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: groupPeaks,purityD-method
> ### Title: Using purityD object, group multiple peaklists by similar mz
> ###   values (mzML or .csv)
> ### Aliases: groupPeaks,purityD-method groupPeaks
> 
> ### ** Examples
> 
> 
> datapth <- system.file("extdata", "dims", "mzML", package="msPurityData")
> inDF <- Getfiles(datapth, pattern=".mzML", check = FALSE, cStrt = FALSE)
> ppDIMS <- purityD(fileList=inDF, cores=1, mzML=TRUE)
> ppDIMS <- averageSpectra(ppDIMS)
> grpedP <- groupPeaks(ppDIMS)
> 
> 
> 
> cleanEx()

detaching ‘package:mzR’

> nameEx("groupPeaksEx")
> ### * groupPeaksEx
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: groupPeaksEx
> ### Title: Group peaklists from a list of dataframes
> ### Aliases: groupPeaksEx
> 
> ### ** Examples
> 
> 
> datapth <- system.file("extdata", "dims", "mzML", package="msPurityData")
> inDF <- Getfiles(datapth, pattern=".mzML", check = FALSE, cStrt = FALSE)
> ppDIMS <- purityD(fileList=inDF, cores=1, mzML=TRUE)
> ppDIMS <- averageSpectra(ppDIMS)
> grpedP <- groupPeaks(ppDIMS)
> 
> 
> 
> cleanEx()

detaching ‘package:mzR’

> nameEx("initialize-purityD-method")
> ### * initialize-purityD-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: initialize,purityD-method
> ### Title: Constructor for S4 class to represent a DI-MS purityD
> ### Aliases: initialize,purityD-method
> 
> ### ** Examples
> 
> datapth <- system.file("extdata", "dims", "mzML", package="msPurityData")
> inDF <- Getfiles(datapth, pattern=".mzML", check = FALSE, cStrt = FALSE)
> ppDIMS <- purityD(fileList=inDF, cores=1, mzML=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("iwNormGauss")
> ### * iwNormGauss
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: iwNormGauss
> ### Title: Gaussian normalisation for isolation window efficiency
> ### Aliases: iwNormGauss
> 
> ### ** Examples
> 
> 
> iwNormFun <- iwNormGauss(minOff=-0.5, maxOff=0.5)
> pm <- data.frame(mz=c(99.5, 99.9, 100, 100.1, 100.5),i=c(1000, 1000, 1000, 1000, 1000))
> mzmax = 100.5
> mzmin = 99.5
> middle <- mzmax-(mzmax-mzmin)/2
> adjustmz = pm$mz-middle
> 
> # normalise the intensities
> pm$normi = pm$i*iwNormFun(adjustmz)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("iwNormQE.5")
> ### * iwNormQE.5
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: iwNormQE.5
> ### Title: Q-Exactive +/- 0.5 range, normalisation for isolation window
> ###   efficiency
> ### Aliases: iwNormQE.5
> 
> ### ** Examples
> 
> iwNormFun <- iwNormQE.5()
> pm <- data.frame(mz=c(99.5, 99.9, 100, 100.1, 100.5),i=c(1000, 1000, 1000, 1000, 1000))
> mzmax = 100.5
> mzmin = 99.5
> middle <- mzmax-(mzmax-mzmin)/2
> adjustmz = pm$mz-middle
> 
> # normalise the intensities
> pm$normi = pm$i*iwNormFun(adjustmz)
> 
> 
> 
> 
> cleanEx()
> nameEx("iwNormRcosine")
> ### * iwNormRcosine
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: iwNormRcosine
> ### Title: Raised cosine normalisation for isolation window efficiency
> ### Aliases: iwNormRcosine
> 
> ### ** Examples
> 
> iwNormFun <- iwNormRcosine()
> pm <- data.frame(mz=c(99.5, 99.9, 100, 100.1, 100.5),i=c(1000, 1000, 1000, 1000, 1000))
> mzmax = 100.5
> mzmin = 99.5
> middle <- mzmax-(mzmax-mzmin)/2
> adjustmz = pm$mz-middle
> 
> # normalise the intensities
> pm$normi = pm$i*iwNormFun(adjustmz)
> 
> 
> 
> cleanEx()
> nameEx("pcalc")
> ### * pcalc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pcalc
> ### Title: Perform purity calculation on a peak matrix
> ### Aliases: pcalc
> 
> ### ** Examples
> 
> pm <- rbind(c(100, 1000),c(101.003, 10))
> pcalc(pm, mzmin = 98, mzmax = 102, mztarget=100, ppm=5)
[1] 0.990099 2.000000
> pcalc(pm, mzmin = 98, mzmax = 102, mztarget=100, ppm=5, isotopes = TRUE)
[1] 1 1
> 
> 
> 
> 
> cleanEx()
> nameEx("purityA")
> ### * purityA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: purityA
> ### Title: Assess the purity of multiple LC-MS/MS or DI-MS/MS files
> ###   (constructor)
> ### Aliases: purityA
> 
> ### ** Examples
> 
> filepths <- system.file("extdata", "lcms", "mzML", "LCMSMS_1.mzML", package="msPurityData")
> pa <- purityA(filepths)
> 
> 
> 
> cleanEx()

detaching ‘package:mzR’

> nameEx("purityD-class")
> ### * purityD-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: purityD-class
> ### Title: An S4 class to represent a DI-MS purityD
> ### Aliases: purityD-class purityD
> 
> ### ** Examples
> 
> datapth <- system.file("extdata", "dims", "mzML", package="msPurityData")
> inDF <- Getfiles(datapth, pattern=".mzML", check = FALSE, cStrt = FALSE)
> ppDIMS <- purityD(fileList=inDF, cores=1, mzML=TRUE)
> 
> 
> 
> cleanEx()
> nameEx("purityX")
> ### * purityX
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: purityX
> ### Title: Assessing anticipated purity of XCMS features from an LC-MS run
> ### Aliases: purityX
> 
> ### ** Examples
> 
> msPths <- list.files(system.file("extdata", "lcms", "mzML", package="msPurityData"), full.names = TRUE, pattern = "LCMS_")
> xset <- xcms::xcmsSet(msPths)
Loading required package: xcms
Loading required package: Biobase
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, cbind, colMeans, colSums, colnames, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, lengths, mapply, match, mget, order, paste, pmax, pmax.int,
    pmin, pmin.int, rank, rbind, rowMeans, rowSums, rownames, sapply,
    setdiff, sort, table, tapply, union, unique, unsplit, which,
    which.max, which.min

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: BiocParallel
Loading required package: MSnbase
Loading required package: mzR
Loading required package: ProtGenerics

This is MSnbase version 2.4.2 
  Visit https://lgatto.github.io/MSnbase/ to get started.


Attaching package: ‘MSnbase’

The following object is masked from ‘package:stats’:

    smooth

The following object is masked from ‘package:base’:

    trimws


This is xcms version 3.0.2 


Attaching package: ‘xcms’

The following object is masked from ‘package:stats’:

    sigma

> xset <- xcms::group(xset)
Processing 3179 mz slices ... OK
> xset <- xcms::retcor(xset)
Performing retention time correction using 763 peak groups.
> xset <- xcms::group(xset)
Processing 3179 mz slices ... OK
> ppLCMS <- purityX(xset, cores = 1, xgroups = c(1, 2))
[1] 4
> 
> 
> 
> 
> cleanEx()

detaching ‘package:xcms’, ‘package:MSnbase’, ‘package:ProtGenerics’,
  ‘package:mzR’, ‘package:BiocParallel’, ‘package:Biobase’,
  ‘package:BiocGenerics’, ‘package:parallel’

> nameEx("spectral_matching")
> ### * spectral_matching
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spectral_matching
> ### Title: Spectral matching
> ### Aliases: spectral_matching
> 
> ### ** Examples
> 
> msmsPths <- list.files(system.file("extdata", "lcms", "mzML", package="msPurityData"), full.names = TRUE, pattern = "MSMS")
> xset <- xcms::xcmsSet(msmsPths, nSlaves = 1)
Use of argument 'nSlaves' is deprecated, please use 'BPPARAM' instead.
Loading required package: xcms
Loading required package: Biobase
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, cbind, colMeans, colSums, colnames, do.call,
    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,
    lapply, lengths, mapply, match, mget, order, paste, pmax, pmax.int,
    pmin, pmin.int, rank, rbind, rowMeans, rowSums, rownames, sapply,
    setdiff, sort, table, tapply, union, unique, unsplit, which,
    which.max, which.min

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: BiocParallel
Loading required package: MSnbase
Loading required package: mzR
Loading required package: ProtGenerics

This is MSnbase version 2.4.2 
  Visit https://lgatto.github.io/MSnbase/ to get started.


Attaching package: ‘MSnbase’

The following object is masked from ‘package:stats’:

    smooth

The following object is masked from ‘package:base’:

    trimws


This is xcms version 3.0.2 


Attaching package: ‘xcms’

The following object is masked from ‘package:stats’:

    sigma

> xset <- xcms::group(xset)
Processing 3163 mz slices ... OK
> xset <- xcms::retcor(xset)
Performing retention time correction using 351 peak groups.
> xset <- xcms::group(xset)
Processing 3163 mz slices ... OK
> 
> pa  <- purityA(msmsPths)
> pa <- frag4feature(pa, xset)
> #NOTE that scan_ids here are refer the unique scan id calculated by purityA (pids).
> #Only required if you want to limit the spectral matching to certain scans
> result <- spectral_matching(pa@db_path, scan_ids = c(1120,  366, 1190, 601,  404,1281, 1323, 1289))
Running msPurity spectral matching function for LC-MS(/MS) data
Error in if (is.na(target_db_pth)) { : argument is of length zero
Calls: spectral_matching
Execution halted
